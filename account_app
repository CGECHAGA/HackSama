import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, TextInput, StyleSheet, ScrollView, Alert } from 'react-native';

// TypeScript interfaces
interface ChatMessage {
  query: string;
  response: string;
}

interface USSDOption {
  code: string;
  response: string;
}

const AccountApp: React.FC = () => {
  // Core state
  const [balance] = useState<number>(12450.75);
  const [isOnline, setIsOnline] = useState<boolean>(true);
  const [isBalanceVisible, setIsBalanceVisible] = useState<boolean>(false);
  
  // AI Advisor state
  const [aiQuery, setAiQuery] = useState<string>('');
  const [aiResponse, setAiResponse] = useState<string>('');
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([]);

  // Security state
  const [simSwapped, setSimSwapped] = useState<boolean>(false);
  const [authMethod, setAuthMethod] = useState<'biometric' | 'pin' | 'ussd'>('biometric');

  // Offline cache
  const cachedData = {
    balance: "KES 12,450.75 (cached)",
    ussd: [
      { code: "*234*1#", response: "Balance: KES 12,450.75" },
      { code: "*234*2#", response: "Send Money Menu" },
      { code: "*234*5#", response: "Stock Trading Menu" }
    ] as USSDOption[],
    ai: {
      "how to save": "Use the 50-30-20 rule: 50% needs, 30% wants, 20% savings",
      "best stocks": "Top picks: Safaricom (SCOM), KCB Group (KCB)",
      "investment tips": "Diversify across stocks, bonds, and MMFs"
    } as Record<string, string>
  };

  // Check network status
  useEffect(() => {
    // In a real app, you would use NetInfo from '@react-native-community/netinfo'
    const interval = setInterval(() => {
      const online = Math.random() > 0.1; // 90% chance of being online for demo
      setIsOnline(online);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  // Check for SIM swap on mount
  useEffect(() => {
    const checkSimSwap = async () => {
      const swapped = Math.random() > 0.9; // 10% chance for demo
      if (swapped) {
        setSimSwapped(true);
        Alert.alert("Security Alert", "SIM change detected! Please verify your account.");
      }
    };
    
    checkSimSwap();
  }, []);

  // AI query handler
  const handleAIQuery = () => {
    if (!aiQuery.trim()) return;
    
    const response = isOnline 
      ? `AI Response: ${aiQuery} (would call API in production)`
      : cachedData.ai[aiQuery.toLowerCase()] || "I can't answer that offline";
    
    setAiResponse(response);
    setChatHistory([...chatHistory, { query: aiQuery, response }]);
    setAiQuery('');
  };

  // Biometric authentication
  const handleBiometricAuth = async () => {
    try {
      // In a real app, use react-native-biometrics or similar
      Alert.alert("Biometric Auth", "Authentication would trigger here");
      return true;
    } catch (error) {
      console.error("Biometric auth failed:", error);
      return false;
    }
  };

  // USSD handler
  const handleUSSD = (code: string) => {
    if (!code.startsWith('*') || !code.endsWith('#')) {
      Alert.alert("Error", "Invalid USSD code format");
      return;
    }

    const response = isOnline
      ? `USSD request sent: ${code}`
      : cachedData.ussd.find(opt => opt.code === code)?.response 
        || "USSD service unavailable offline";
    
    Alert.alert("USSD Response", response);
  };

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
      {/* Status bar */}
      <View style={[styles.statusBar, isOnline ? styles.online : styles.offline]}>
        <Text style={styles.statusText}>
          {isOnline ? 'üü¢ Online' : 'üî¥ Offline'}
        </Text>
      </View>

      {/* Security alerts */}
      {simSwapped && (
        <View style={styles.securityAlert}>
          <Text style={styles.securityAlertText}>
            ‚ö†Ô∏è SIM change detected! Please verify your account.
          </Text>
        </View>
      )}

      {/* Balance card */}
      <View style={styles.card}>
        <View style={styles.cardHeader}>
          <Text style={styles.cardTitle}>üí∞ Chuma Pesa Balance</Text>
          <TouchableOpacity 
            onPress={() => setIsBalanceVisible(!isBalanceVisible)}
            style={styles.visibilityButton}
          >
            <Text>{isBalanceVisible ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}</Text>
          </TouchableOpacity>
        </View>
        <Text style={styles.balanceAmount}>
          {isBalanceVisible ? `KES ${balance.toLocaleString()}` : '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'}
        </Text>
      </View>

      {/* AI Financial Advisor */}
      <View style={styles.card}>
        <Text style={styles.cardTitle}>üß† AI Financial Advisor</Text>
        <View style={styles.aiInputGroup}>
          <TextInput
            style={styles.input}
            value={aiQuery}
            onChangeText={setAiQuery}
            placeholder="Ask about savings, stocks, etc..."
            onSubmitEditing={handleAIQuery}
            placeholderTextColor="#999"
          />
          <TouchableOpacity style={styles.askButton} onPress={handleAIQuery}>
            <Text style={styles.buttonText}>Ask</Text>
          </TouchableOpacity>
        </View>
        
        {aiResponse && (
          <View style={styles.aiResponse}>
            <Text style={styles.aiResponseText}>{aiResponse}</Text>
            {!isOnline && (
              <View style={styles.offlineBadge}>
                <Text style={styles.offlineBadgeText}>Offline Answer</Text>
              </View>
            )}
          </View>
        )}
      </View>

      {/* Authentication methods */}
      <View style={styles.card}>
        <Text style={styles.cardTitle}>üîê Authentication</Text>
        <View style={styles.authOptions}>
          <TouchableOpacity
            style={[
              styles.authButton,
              authMethod === 'biometric' && styles.activeAuthButton
            ]}
            onPress={async () => {
              setAuthMethod('biometric');
              await handleBiometricAuth();
            }}
          >
            <Text style={styles.authButtonText}>üëÜ Biometric</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.authButton,
              authMethod === 'pin' && styles.activeAuthButton
            ]}
            onPress={() => setAuthMethod('pin')}
          >
            <Text style={styles.authButtonText}>üî¢ PIN</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.authButton,
              authMethod === 'ussd' && styles.activeAuthButton
            ]}
            onPress={() => {
              setAuthMethod('ussd');
              handleUSSD('*234#');
            }}
          >
            <Text style={styles.authButtonText}>üì± USSD</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Quick actions */}
      <View style={styles.quickActions}>
        <TouchableOpacity 
          style={styles.actionButton}
          onPress={() => handleUSSD('*234*1#')}
        >
          <Text style={styles.actionButtonText}>Check Balance</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={styles.actionButton}
          onPress={() => handleUSSD('*234*2#')}
        >
          <Text style={styles.actionButtonText}>Send Money</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={styles.actionButton}
          onPress={() => handleUSSD('*234*5#')}
        >
          <Text style={styles.actionButtonText}>Trade Stocks</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  contentContainer: {
    padding: 16,
    paddingBottom: 32,
  },
  statusBar: {
    padding: 10,
    borderRadius: 5,
    marginBottom: 15,
    alignItems: 'center',
  },
  online: {
    backgroundColor: '#e8f5e9',
  },
  offline: {
    backgroundColor: '#ffebee',
  },
  statusText: {
    fontWeight: 'bold',
  },
  securityAlert: {
    backgroundColor: '#fff3e0',
    padding: 12,
    borderRadius: 5,
    marginBottom: 15,
  },
  securityAlertText: {
    color: '#e65100',
    textAlign: 'center',
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  visibilityButton: {
    padding: 8,
  },
  balanceAmount: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  aiInputGroup: {
    flexDirection: 'row',
    gap: 10,
    marginVertical: 12,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    padding: 12,
    fontSize: 16,
  },
  askButton: {
    backgroundColor: '#2196f3',
    borderRadius: 5,
    paddingHorizontal: 16,
    justifyContent: 'center',
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },
  aiResponse: {
    backgroundColor: '#f5f5f5',
    padding: 12,
    borderRadius: 5,
    marginTop: 10,
  },
  aiResponseText: {
    fontSize: 16,
  },
  offlineBadge: {
    backgroundColor: '#e0e0e0',
    alignSelf: 'flex-start',
    paddingVertical: 2,
    paddingHorizontal: 6,
    borderRadius: 3,
    marginTop: 6,
  },
  offlineBadgeText: {
    fontSize: 12,
  },
  authOptions: {
    flexDirection: 'row',
    gap: 10,
    marginTop: 12,
  },
  authButton: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    padding: 12,
    alignItems: 'center',
  },
  activeAuthButton: {
    backgroundColor: '#e3f2fd',
    borderColor: '#2196f3',
  },
  authButtonText: {
    fontSize: 16,
  },
  quickActions: {
    flexDirection: 'row',
    gap: 10,
    marginTop: 10,
  },
  actionButton: {
    flex: 1,
    backgroundColor: '#2196f3',
    borderRadius: 5,
    padding: 12,
    alignItems: 'center',
  },
  actionButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

export default AccountApp;